#pragma kernel PosMain
#pragma kernel ColorMain

RWStructuredBuffer<float4> posRWStructuredBuffer;
RWStructuredBuffer<float3> colorRWStructuredBuffer;

uint Hash(uint seed) {
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    return seed;
}

float PseudorandRange(float2 range, uint seed) {
    return range.x + ((float)Hash(seed) / 4294967295.0f) * (range.y - range.x);
}

float3 HSVToRGB(float3 HSV) {
    const float H = HSV[0] / 60.0f;
    const float S = HSV[1];
    const float V = HSV[2];

    const float fract = H - floor(H);
    const float P = V * (1.0f - S);
    const float Q = V * (1.0f - S * fract);
    const float T = V * (1.0f - S * (1.0f - fract));

    if(0.0f <= H && H < 1.0f) {
        return float3(V, T, P);
    } else if(1.0f <= H && H < 2.0f) {
        return float3(Q, V, P);
    } else if(2.0f <= H && H < 3.0f) {
        return float3(P, V, T);
    } else if(3.0f <= H && H < 4.0f) {
        return float3(P, Q, V);
    } else if(4.0f <= H && H < 5.0f) {
        return float3(T, P, V);
    } else if(5.0f <= H && H < 6.0f) {
        return float3(V, P, Q);
    } else{
        return float3(0.0f, 0.0f, 0.0f);
    }
}

[numthreads(1024, 1, 1)]
void PosMain(uint3 id: SV_DispatchThreadID) {
    const float phi = PseudorandRange(float2(0.0f, 360.0f), id.x ^ 324578u);
    const float theta = PseudorandRange(float2(0.0f, 360.0f), id.x ^ 73859u);
    const float radius = PseudorandRange(float2(300.0f, 400.0f), id.x * 29u);

    posRWStructuredBuffer[id.x] = float4(
        cos(phi) * cos(theta) * radius,
        sin(phi) * radius,
        cos(phi) * sin(theta) * radius,
        PseudorandRange(float2(2.0f, 4.0f), id.x)
    );
}

[numthreads(1024, 1, 1)]
void ColorMain(uint3 id: SV_DispatchThreadID) {
    colorRWStructuredBuffer[id.x] = HSVToRGB(float3(
        PseudorandRange(float2(0.0f, 360.0f), id.x >> 4),
        PseudorandRange(float2(0.0f, 1.0f), id.x << 7),
        1.0f
    ));
}